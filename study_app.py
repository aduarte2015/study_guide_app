# -*- coding: utf-8 -*-
"""study_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wFO7Zvh0RUPTU5a_pCCDCMML28gnRiTq
"""

# Install required libraries
!pip install openai==0.28 gradio elevenlabs
!pip install python-pptx
!pip install python-dotenv

# Import libraries
import openai
from gtts import gTTS
import gradio as gr
import os
from pptx import Presentation
from pptx.util import Inches
import requests
from PIL import Image
from io import BytesIO

# Load environment variables from .env file
load_dotenv()

# Set up OpenAI API key
openai.api_key = ""

# Function to generate study guide from GPT-4
def generate_study_guide(theme):
    try:
        prompt = f"Create a detailed study guide for the topic: {theme}. Make it easy to understand for students."
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "system", "content": "You are a helpful study guide generator."},
                      {"role": "user", "content": prompt}],
            max_tokens=800,
            temperature=0.7,
        )
        study_guide = response.choices[0].message['content']
        return study_guide
    except Exception as e:
        return f"Error: {e}"

# Function to generate an image using DALL-E
def generate_image(theme):
    try:
        response = openai.Image.create(
            prompt=theme,  # Use the theme to generate an image
            n=1,
            size="512x512"
        )
        image_url = response['data'][0]['url']
        image_response = requests.get(image_url)
        image = BytesIO(image_response.content)
        return image
    except Exception as e:
        return f"Error generating image: {e}"

# Function to create PowerPoint presentation
def generate_ppt(theme, study_guide, image):
    try:
        prs = Presentation()

        # Slide 1: Title
        slide_1 = prs.slides.add_slide(prs.slide_layouts[0])
        title = slide_1.shapes.title
        subtitle = slide_1.placeholders[1]
        title.text = theme
        subtitle.text = "Generated Study Guide and Image"

        # Slide 2: Study Guide
        slide_2 = prs.slides.add_slide(prs.slide_layouts[1])
        title = slide_2.shapes.title
        title.text = "Study Guide"
        textbox = slide_2.shapes.placeholders[1]
        textbox.text = study_guide

        # Slide 3: Image
        slide_3 = prs.slides.add_slide(prs.slide_layouts[5])
        title = slide_3.shapes.title
        title.text = "Image for the Theme"
        slide_3.shapes.add_picture(image, Inches(1), Inches(1), width=Inches(4), height=Inches(3))

        ppt_file = f"{theme.replace(' ', '_')}_study_guide.pptx"
        prs.save(ppt_file)
        return ppt_file
    except Exception as e:
        return f"Error generating PowerPoint: {e}"

# Function to handle the Gradio interface
def app(theme):
    # Generate study guide
    study_guide = generate_study_guide(theme)

    # Generate image
    image = generate_image(theme)

    if isinstance(image, BytesIO):  # Check if image was generated successfully
        # Generate PowerPoint
        ppt_file = generate_ppt(theme, study_guide, image)

        return study_guide, image, ppt_file
    else:
        return study_guide, None, None

# Gradio Interface
interface = gr.Interface(
    fn=app,
    inputs=gr.Textbox(label="Enter a Theme or Topic", placeholder="E.g., Photosynthesis"),
    outputs=[
        gr.Textbox(label="Generated Study Guide"),
        gr.Image(label="Generated Image", type="pil"),  # Display the image
        gr.File(label="Download PowerPoint Presentation")  # Output PowerPoint file
    ],
    title="Study Guide Generator with Image",
    description="Enter a theme or topic, and this app will generate a study guide, an image, and a PowerPoint presentation for you.",
)

# Launch Gradio in Colab
interface.launch(share=True)